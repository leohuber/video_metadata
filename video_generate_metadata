#!/usr/bin/env python3

import os
import shutil
import sys
import json 
from video_slibrary_print_utils import print_green, print_red, print_blue
from video_slibrary_metadata_utils import (
        get_metadata_all, generate_codec_info, get_date_created_and_identifier,
        get_make, get_model, get_source_image_height, get_source_image_width,
        get_video_frame_rate, get_compressor_name, get_gps, get_country_code,
        get_country, get_creator, get_state, get_city, get_sublocation,
        get_headline, get_title_suffix, get_description, get_copyright
    )

def error_exit(message):
    print_red(message)
    sys.exit(1)

def check_file_exists(filename):
    if not os.path.exists(filename):
        error_exit(f"Could not find file: {filename}")

def generate_metadata(video_file):

    date_created = None
    identifier = None
    destination_file = None

    print_green(f"Processing file: {video_file}")

    # Check if video file exists
    check_file_exists(video_file)

    # Extract file extension
    extension = os.path.splitext(video_file)[1][1:].lower()

    date_created, identifier = get_date_created_and_identifier(video_file, extension)
    if date_created is None or identifier is None:
        error_exit("date_created or identifier is None. Exiting.")

    # Check if the file extension is either mov or mp4
    if extension not in ["mov", "mp4"]:
        error_exit(f"Unsupported file extension: {extension}. Only 'mov' and 'mp4' files are allowed.")
    
    # Rename the file to the identifier
    if extension == "mov":
        destination_file = f"{identifier}.mov"
    elif extension == "mp4":
        destination_file = f"{identifier}.mp4"
    
    if os.path.abspath(video_file) != os.path.abspath(destination_file):
        os.rename(video_file, destination_file)
        video_file = destination_file

    # Meta data file names
    meta_file = f"{os.path.splitext(video_file)[0]}_meta.json"
    meta_all_file = f"{os.path.splitext(video_file)[0]}_meta_all.txt"

    make = get_make(video_file)
    model = get_model(video_file)
    source_image_height = get_source_image_height(video_file)
    source_image_width = get_source_image_width(video_file)
    video_frame_rate = get_video_frame_rate(video_file)
    compressor_name = get_compressor_name(video_file)
    gps = get_gps(video_file)
    country_code = get_country_code(video_file)
    country = get_country(video_file)
    creator = get_creator(video_file)
    state = get_state(video_file)
    city = get_city(video_file)
    sublocation = get_sublocation(video_file)
    headline = get_headline(video_file)
    title_suffix = get_title_suffix(video_file)
    description = get_description(video_file)
    copyright = get_copyright(video_file)

    # Create a dictionary to hold the metadata
    metadata_fields = [
        ("IDENTIFIER", identifier),
        ("DATE_CREATED", date_created),
        ("MAKE", make),
        ("MODEL", model),
        ("SOURCE_IMAGE_HEIGHT", source_image_height),
        ("SOURCE_IMAGE_WIDTH", source_image_width),
        ("VIDEO_FRAME_RATE", video_frame_rate),
        ("COMPRESSOR_NAME", compressor_name),
        ("GPS", gps),
        ("CREATOR", creator),
        ("COUNTRY_CODE", country_code),
        ("COUNTRY", country),
        ("STATE", state),
        ("CITY", city),
        ("SUBLOCATION", sublocation),
        ("HEADLINE", headline),
        ("TITLE_SUFFIX", title_suffix),
        ("DESCRIPTION", description),
        ("COPYRIGHT", copyright),
    ]

    # Get all metadata fields
    meta_data_all = get_metadata_all(video_file)

    metadata = {}
    for key, value in metadata_fields:
        if value and value != '':
            metadata[key] = value
        else:
            print_green(f"Skipping {key} as it has an empty value")

    codec_info = generate_codec_info(video_file)
    metadata['CODEC_INFO'] = codec_info

    # Write metadata to a JSON file
    with open(meta_file, 'w') as f:
        json.dump(metadata, f, indent=4)

    # Write all metadata to a text file
    with open(meta_all_file, 'w') as f:
        f.write(meta_data_all)

    meta_file_zzz = "zzz_meta_data_template.json"

    if not os.path.exists(meta_file_zzz):
        print_green("Generating video metadata template...")
        meta_data = {
            "MAKE": "Canon - DEFAULT",
            "MODEL": "Canon EOS R6 - DEFAULT",
            "GPS": "-35.2975906, 149.1012676, 554 - DEFAULT",
            "CREATOR": "Leo Huber - DEFAULT",
            "COUNTRY_CODE": "CHE - DEFAULT",
            "COUNTRY": "Switzerland - DEFAULT",
            "STATE": "Zurich - DEFAULT",
            "CITY": "Zurich - DEFAULT",
            "SUBLOCATION": "Sublocation - DEFAULT",
            "HEADLINE": "Headline - DEFAULT",
            "TITLE_SUFFIX": "Title Suffix - DEFAULT",
            "DESCRIPTION": "Description - DEFAULT",
            "COPYRIGHT": "Leo Huber - DEFAULT"
        }

        with open(meta_file_zzz, 'w') as f:
            json.dump(meta_data, f, indent=4)

# Check if the exiftool command is available in the system
if shutil.which('exiftool') is None:
  error_exit("Exiftol command not found. Please install it before running this script.")

# Check if at least one video file is provided as a command-line argument
if len(sys.argv) < 2:
    error_exit("No video file specified. Please provide at least one video file as an argument.")

for movie_file in sys.argv[1:]:
    generate_metadata(movie_file)