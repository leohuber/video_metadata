#!/usr/bin/env python3

import os
import shutil
import sys
import subprocess
import json
from video_slibrary_metadata_utils import get_date_created_and_identifier
from video_slibrary_print_utils import print_green, print_red, print_blue

def error_exit(message):
    print_red(message)
    sys.exit(1)

def check_file_exists(filename):
    if not os.path.exists(filename):
        error_exit(f"Could not find file: {filename}")

def generate_metadata(video_file):

    print_green(f"Processing file: {video_file}")

    # Check if video file exists
    check_file_exists(video_file)

    # Extract file extension
    extension = os.path.splitext(video_file)[1][1:].lower()

    # Extract the model of the camera
    model = subprocess.getoutput(f"exiftool -q -q -b -api largefilesupport=1 -Model '{video_file}'")

    # Create meta data file name
    meta_file = f"{os.path.splitext(video_file)[0]}_meta.json"

    date_created, identifier = get_date_created_and_identifier(video_file, extension, model)
    
    if date_created is None or identifier is None:
        error_exit("date_created or identifier is None. Exiting.")

    # Extract other metadata
    make = subprocess.getoutput(f"exiftool -q -q -b -api largefilesupport=1 -Make '{video_file}'") or 'Apple - DEFAULT'
    model = subprocess.getoutput(f"exiftool -q -q -b -api largefilesupport=1 -Model '{video_file}'") or 'iPhone 11 Pro - DEFAULT'
    source_image_height = subprocess.getoutput(f"exiftool -q -q -b -api largefilesupport=1 -SourceImageHeight '{video_file}'")
    source_image_width = subprocess.getoutput(f"exiftool -q -q -b -api largefilesupport=1 -SourceImageWidth '{video_file}'")
    video_frame_rate = subprocess.getoutput(f"exiftool -q -q -b -api largefilesupport=1 -VideoFrameRate '{video_file}'")
    compressor_name = subprocess.getoutput(f"exiftool -q -q -b -api largefilesupport=1 -CompressorName '{video_file}'")
    gps = subprocess.getoutput(f"exiftool -q -q -b -api largefilesupport=1 -GPSCoordinates '{video_file}'")
    if gps:
        gps = gps.replace(' ', ', ')
    else:
        gps = '-35.2975906, 149.1012676, 554 - DEFAULT'
    country_code = subprocess.getoutput(f"exiftool -q -q -b -api largefilesupport=1 -CountryCode '{video_file}'") or 'CHE - DEFAULT'
    country = subprocess.getoutput(f"exiftool -q -q -b -api largefilesupport=1 -Country '{video_file}'") or 'Switzerland - DEFAULT'
    creator = subprocess.getoutput(f"exiftool -q -q -b -api largefilesupport=1 -Creator '{video_file}'") or 'Leo Huber - DEFAULT'
    state = subprocess.getoutput(f"exiftool -q -q -b -api largefilesupport=1 -State '{video_file}'") or 'Zurich - DEFAULT'
    city = subprocess.getoutput(f"exiftool -q -q -b -api largefilesupport=1 -City '{video_file}'") or 'Zurich - DEFAULT'
    sublocation = subprocess.getoutput(f"exiftool -q -q -b -api largefilesupport=1 -Location '{video_file}'") or 'Sublocation - DEFAULT'
    headline = subprocess.getoutput(f"exiftool -q -q -b -api largefilesupport=1 -Headline '{video_file}'") or 'Headline - DEFAULT'
    title_suffix = subprocess.getoutput(f"exiftool -q -q -b -api largefilesupport=1 -Title '{video_file}'")
    if title_suffix:
        title_suffix = title_suffix.partition('_')[-1]
    else:
        title_suffix = 'Title Suffix - DEFAULT'
    description = subprocess.getoutput(f"exiftool -q -q -b -api largefilesupport=1 -Description '{video_file}'") or 'Description - DEFAULT'
    copyright = subprocess.getoutput(f"exiftool -q -q -b -api largefilesupport=1 -Rights '{video_file}'") or 'Leo Huber - DEFAULT'

    # Create a dictionary to hold the metadata
    metadata_fields = [
        ("IDENTIFIER", identifier),
        ("DATE_CREATED", date_created),
        ("MAKE", make),
        ("MODEL", model),
        ("SOURCE_IMAGE_HEIGHT", source_image_height),
        ("SOURCE_IMAGE_WIDTH", source_image_width),
        ("VIDEO_FRAME_RATE", video_frame_rate),
        ("COMPRESSOR_NAME", compressor_name),
        ("GPS", gps),
        ("CREATOR", creator),
        ("COUNTRY_CODE", country_code),
        ("COUNTRY", country),
        ("STATE", state),
        ("CITY", city),
        ("SUBLOCATION", sublocation),
        ("HEADLINE", headline),
        ("TITLE_SUFFIX", title_suffix),
        ("DESCRIPTION", description),
        ("COPYRIGHT", copyright),
    ]

    metadata = {}
    for key, value in metadata_fields:
        if value and value != '':
            metadata[key] = value
        else:
            print_green(f"Skipping {key} as it has an empty value")

    # Write metadata to a JSON file
    with open(meta_file, 'w') as f:
        json.dump(metadata, f, indent=4)

# Check if the exiftool command is available in the system
if shutil.which('exiftool') is None:
  error_exit("Exiftol command not found. Please install it before running this script.")

# Check if at least one video file is provided as a command-line argument
if len(sys.argv) < 2:
    error_exit("No video file specified. Please provide at least one video file as an argument.")

for movie_file in sys.argv[1:]:
    generate_metadata(movie_file)