#!/usr/bin/env python3

import shutil
import sys
import os
import subprocess
from video_slibrary_metadata_utils import get_date_created_and_identifier
from video_slibrary_print_utils import print_green, print_red, print_blue

def error_exit(message):
    # Prints an error message to the standard error stream and exits the script with a status code of 1.
    print_red(message)
    sys.exit(1)

def check_file_exists(file_path):
    # Check if the given file path points to an existing file. If not, print an error message and exit the script.
    if not os.path.isfile(file_path):
        error_exit(f"Could not find file: {file_path}")

def generate_date_filename(video_file):

    print_green(f"Processing file: {video_file}")

    check_file_exists(video_file)

    # Extracts the file extension from the given video file name, converts it to lowercase, and stores it in the variable 'extension'.
    extension = os.path.splitext(video_file)[1][1:].lower()

    # Extracts the camera model from the video file using exiftool and stores it in the variable 'model'.
    model = subprocess.run(
        ['exiftool', '-q', '-q', '-b', '-api', 'largefilesupport=1', '-Model', video_file],
        stdout=subprocess.PIPE, text=True
    ).stdout.strip()

    date_created = None
    identifier = None
    destination_file = None

    date_created, identifier = get_date_created_and_identifier(video_file, extension, model)
    
    if date_created is None or identifier is None:
        error_exit("date_created or identifier is None. Exiting.")

    identifier = date_created[:19].replace(' ', '_').replace(':', '')
    destination_file = None

    if extension == "mov":
        destination_file = f"{identifier}.mov"
    elif extension == "mp4":
        destination_file = f"{identifier}.mp4"
    elif extension == "mts":
        destination_file = f"{identifier}.mts"
    
    if destination_file:
        if os.path.abspath(video_file) == os.path.abspath(destination_file):
            print_green("Source and destination files are the same. Aborting to prevent overwriting.")
        else:
            shutil.copy(video_file, destination_file)
            # Create backup directory if it doesn't exist
            backup_dir = os.path.join(os.path.dirname(video_file), "backup")
            os.makedirs(backup_dir, exist_ok=True)
            # Copy the original file to the backup directory
            shutil.move(video_file, os.path.join(backup_dir, os.path.basename(video_file)))
    else:
        print_red(f"File format or model not supported for file: {video_file}")

# Check if the exiftool command is available in the system
if shutil.which('exiftool') is None:
  error_exit("Exiftol command not found. Please install it before running this script.")

# Check if at least one video file is provided as a command-line argument
if len(sys.argv) < 2:
    error_exit("No video file specified. Please provide at least one video file as an argument.")

# Process each video file provided as a command-line argument
for video_file in sys.argv[1:]:
    generate_date_filename(video_file)